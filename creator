#!/usr/bin/env node

const yargs = require("yargs/yargs");
const { hideBin } = require("yargs/helpers");
const fs = require("fs");
const { execSync } = require("child_process");
const archiver = require("archiver");

const pathResolver = (path, name) => {
  return `${__dirname}/src/${path}/${name}.ts`;
};

const checkForArgv = (argv, path) => {
  const loc = pathResolver(path, argv.file);
  if (!argv.file || argv.file.trim() === "") {
    console.log("invalid");
    return false;
  } else if (fs.existsSync(loc)) {
    console.log("File already exist.");
    return false;
  }
  return loc;
};

const basicBuilder = (command, name) => [
  `${command} [file]`,
  `Generate ready to use ${name} template file.`,
  (yargs) =>
    yargs.positional("file", {
      describe: "File name to generate.",
      demandOption: true,
    }),
];

const fileCreated = (path) => {
  console.log(`File Created: ${path}`);
};

const basicCommand = (argv, folderName, contents) => {
  const path = checkForArgv(argv, folderName);
  if (!path) return;
  fs.writeFileSync(path, contents);
  fileCreated(path);
};

yargs(hideBin(process.argv))
  .command(...basicBuilder("create:boot", "Boot"), (argv) =>
    basicCommand(
      argv,
      "Boot",
      `import { Client } from "discord.js";\n\nexport default async function ${argv.file}(client: Client) {\n\t// code\n}`
    )
  )
  .command(...basicBuilder("create:command", "Command"), (argv) =>
    basicCommand(
      argv,
      "Commands",
      `import { ChatInputCommandInteraction } from "discord.js";\nimport BaseCommand from "../Utils/BaseCommand";\n\nexport default class ${argv.file} extends BaseCommand {\n\tname="";\n\tdescription="";\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.handler = this.handler.bind(this);\n\t}\n\n\tbuilder() {}\n\n\thandler(action: ChatInputCommandInteraction) {}\n}`
    )
  )
  .command(...basicBuilder("create:event", "Event"), (argv) =>
    basicCommand(
      argv,
      "Events",
      `import { Events } from "discord.js";\nimport BaseEvent, { ActionInterface } from "../Utils/BaseEvent";\n\nexport default class ${argv.file} extends BaseEvent<T> {\n\ttype: string = Events.EventType;\n\n\thandler({ action, client }: ActionInterface<T>) {}\n}`
    )
  )
  .command(...basicBuilder("create:listener", "Listener"), (argv) =>
    basicCommand(
      argv,
      "Listeners",
      `import BaseListener, { HandlerProps } from "../Utils/BaseListener";\n\nexport class ${argv.file} extends BaseListener {\n\tname = "${argv.file}";\n\n\thandler({ parameters, client, response }: HandlerProps) {}\n}`
    )
  )
  .command(...basicBuilder("create:button", "Button"), (argv) =>
    basicCommand(
      argv,
      "Interactions/Buttons",
      `import { ButtonInteraction } from "discord.js";\nimport BaseButton from "../../Utils/BaseButton";\n\nexport default class ${argv.file} extends BaseButton {\n\tcustomId = "${argv.file}";\n\n\thandler(interaction: ButtonInteraction) {}\n}`
    )
  )
  .command(...basicBuilder("create:modal", "Modal"), (argv) =>
    basicCommand(
      argv,
      "Interactions/Modals",
      `import { ModalBuilder, ModalSubmitInteraction, CacheType } from "discord.js"\nimport BaseModal from "../../Utils/BaseModal";\n\nexport default class ${argv.file} extends BaseModal {\n\tcustomId = "${argv.file}";\n\n\tbuilder(builder: ModalBuilder) {}\n\n\thandler(interaction: ModalSubmitInteraction<CacheType>): void {}\n}`
    )
  )
  .command(...basicBuilder("create:repo", "Repository"), (argv) =>
    basicCommand(
      argv,
      "Repositories",
      `import BaseRepository from "../Utils/BaseRepository";\n\nexport default class ${
        argv.file
      } extends BaseRepository {\n\tname = "${argv.file.toLowerCase()}";\n}`
    )
  )
  .command(...basicBuilder("create:realtime-repo", "Realtime Repository"), (argv) =>
    basicCommand(
      argv,
      "Repositories",
      `import BaseRealtimeRepository from "../Utils/BaseRealTimeRepo";\nimport { Client } from "discord.js";\nimport { DocumentData } from "firebase/firestore";\n\nexport default class ${
        argv.file
      } extends BaseRealtimeRepository {\n\tname = "${argv.file.toLowerCase()}";\n\n\tasync afterListen(client: Client, data: DocumentData[]) {}\n\n\tasync listen(client: Client) {\n\t\tthis.afterListen(client, data)\n\t}\n}`
    )
  )
  .command(...basicBuilder("create:api", "WebHook API"), (argv) =>
    basicCommand(
      argv,
      "Webhook/Api",
      `import BaseApi, { ApiMethods, ApiHandlerInterface } from "../../Utils/BaseApi";\nimport jSchema from "fluent-json-schema";\n\nexport default class ${
        argv.file
      } extends BaseApi<Promise<object>> {\n\turl="/${argv.file.toLowerCase()}";\n\tmethod: ApiMethods = ApiMethods.GET;\n\n\tschema() {\n\t\treturn this.extendSchema({});\n\t}\n\n\tasync handler({ req, res, client }: ApiHandlerInterface) {\n\t\treturn { message: "pong!" }\n\t}\n}\n`
    )
  )
  .command(...basicBuilder("create:sock", "Web Socket Listener"), (argv) =>
    basicCommand(
      argv,
      "WSClient/Listeners",
      `import BaseListener, { SocketListenerHandler } from "./BaseListener";\n\nexport default class ${argv.file} extends BaseListener {\n\tsocket: string = "${argv.file}";\n\n\thandler({params}: SocketListenerHandler) {}\n}`
    )
  )
  .command({
    command: "create:deploy",
    description: "Build and create ready to deploy zip file",
    async handler(argv) {
      execSync("tsc");

      const output = fs.createWriteStream("deploy.zip");
      const archive = archiver("zip");

      output.on("close", function () {
        console.log("Writed Stream: " + archive.pointer() + " total bytes");
        console.log("Done.");
      });

      archive.on("error", function (err) {
        throw err;
      });

      archive.pipe(output);

      // append directory
      archive.directory(__dirname + "/dist", "src/");

      // update files from root.

      if (!fs.existsSync(__dirname + "/.env")) {
        fs.writeFileSync(__dirname + "/.env", "");
      }

      archive.file(".env", fs.readFileSync(__dirname + "/.env"));

      archive.file("package.json", fs.readFileSync(__dirname + "/package.json"));
      // archive.directory(__dirname + "src/Cache", "src/Cache/");
      archive.directory(__dirname + "/assets", "assets/");
      archive.append(null, { name: "src/Cache/" });

      archive.finalize();
    },
  })
  .parse();
